actor Client
participant Server
participant Handler
participant Service
participant DataAccess
database db

entryspacing 0.9
group #navy Registration #white
Client -> Server: [POST] /user\n{"username":" ", "password":" ", "email":" "}
Server -> Handler: {"username":" ", "password":" ", "email":" "}
Handler -> Service: register(RegisterRequest)
Service -> DataAccess: getUser(username)
DataAccess -> db: Find UserData by username
DataAccess --> Service: null
Service -> DataAccess:createUser(userData)
DataAccess -> db: Add UserData
Service -> DataAccess:createAuth(authData)
DataAccess -> db: Add AuthData
Service --> Handler: RegisterResult
Handler --> Server: {"username" : " ", "authToken" : " "}
Server --> Client: 200\n{"username" : " ", "authToken" : " "}
end

group #orange Login #white
Client -> Server: [POST] /session\n{"username": " ", "password": " "}
Server -> Handler: {"username": " ", "password": " "}
Handler -> Service: login(LoginRequest)
Service -> DataAccess: getUser(username)
DataAccess -> db: Find UserData by username
DataAccess --> Service: UserData
Service -> DataAccess: verifyPassword(UserData, LoginRequest)
DataAccess -> db: Create AuthData for user
DataAccess --> Service: AuthData
Service --> Handler: LoginResult
Handler --> Server: {"username": " ", "authToken": " "}
Server --> Client: 200\n{"username": " ", "authToken": " "}
end

group #green Logout #white
Client -> Server: [DELETE] /session\nauthToken
Server -> Handler: authToken
Handler -> Service: logout(LogoutRequest)
Service -> DataAccess: getAuth(authToken)
DataAccess -> db: Find AuthData by authToken
DataAccess --> Service: AuthData
Service -> DataAccess: deleteAuth(AuthData)
DataAccess -> db: Remove AuthData
DataAccess --> Service: null
Service --> Handler: LogoutResult
Handler --> Server: {}
Server --> Client: 200\n{}
end

group #red List Games #white
Client -> Server: [GET] /game\nauthToken
Server -> Handler: authToken
Handler -> Service: listGames(ListGamesRequest)
Service -> DataAccess: getAuth(authToken)
DataAccess -> db: Find AuthData by authToken
DataAccess --> Service: AuthData
Service -> DataAccess: listGames()
DataAccess -> db: Find All Games
DataAccess --> Service: GamesList
Service --> Handler: ListGamesResult
Handler --> Server: { "games": [{ "gameID": 1234, "whiteUsername": " ", "blackUsername": " ", "gameName: " " }] }
Server --> Client: 200\n{ "games": [{ "gameID": 1234, "whiteUsername": " ", "blackUsername": " ", "gameName: " " }] }
end

group #purple Create Game #white
Client -> Server: [POST] /game\nauthToken\n{gameName}
Server -> Handler: authToken\n{gameName}
Handler -> Service: createGame(CreateGameRequest)
Service -> DataAccess: getAuth(authToken)
DataAccess -> db: Find AuthData by authToken
DataAccess --> Service: AuthData
Service -> DataAccess: createGame(gameName)
DataAccess -> db: Create Game with new gameID\nand gameName
DataAccess --> Service: GameData
Service --> Handler: CreateGamesResult
Handler --> Server: { "gameID": 1234 }
Server --> Client: 200\n{ "gameID": 1234 }
end

group #yellow Join Game #black
Client -> Server: [PUT] /game\nauthToken\n{playerColor, gameID}
Server -> Handler: authToken\n{playerColor, gameID}
Handler -> Service: joinGame(JoinGameRequest)
Service -> DataAccess: getAuth(authToken)
DataAccess -> db: Find Authdata by authToken
DataAccess --> Service: AuthData
Service -> DataAccess: getGame(gameID)
DataAccess -> db: Find Game by gameID
DataAccess --> Service: GameData
Service -> DataAccess: updateGame(playerColer, gameID)
DataAccess -> db: Replace Game by gameID
DataAccess --> Service: null
Service --> Handler: JoinGamesResult
Handler --> Server: {}
Server --> Client: 200\n{}
end

group #gray Clear application #white
Client -> Server: [DELETE] /db
Server -> Handler:
Handler -> Service: clear(ClearRequest)
Service -> DataAccess: clear()
DataAccess -> db: Delete all AuthData, GameData, and UserData
DataAccess --> Service: null
Service --> Handler: ClearResult
Handler --> Server: {}
Server --> Client: 200\n{}
end
